// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/31/2021 13:00:11"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          TP2_EV21
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module TP2_EV21_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg [10:0] DATA_ADDR;
reg [32:0] micro_instr_ROM;
// wires                                               
wire [5:0] B_IN;

// assign statements (if any)                          
TP2_EV21 i1 (
// port map - connection between master ports and signals/registers   
	.B_IN(B_IN),
	.CLK(CLK),
	.DATA_ADDR(DATA_ADDR),
	.micro_instr_ROM(micro_instr_ROM)
);
initial 
begin 
#1000000 $finish;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #20000 1'b1;
	#20000;
end 
// micro_instr_ROM[ 32 ]
initial
begin
	micro_instr_ROM[32] = 1'b0;
end 
// micro_instr_ROM[ 31 ]
initial
begin
	micro_instr_ROM[31] = 1'b0;
	micro_instr_ROM[31] = #40000 1'b1;
	micro_instr_ROM[31] = #40000 1'b0;
end 
// micro_instr_ROM[ 30 ]
initial
begin
	micro_instr_ROM[30] = 1'b0;
	micro_instr_ROM[30] = #80000 1'b1;
	micro_instr_ROM[30] = #40000 1'b0;
end 
// micro_instr_ROM[ 29 ]
initial
begin
	micro_instr_ROM[29] = 1'b0;
end 
// micro_instr_ROM[ 28 ]
initial
begin
	micro_instr_ROM[28] = 1'b0;
end 
// micro_instr_ROM[ 27 ]
initial
begin
	micro_instr_ROM[27] = 1'b0;
	micro_instr_ROM[27] = #40000 1'b1;
	micro_instr_ROM[27] = #40000 1'b0;
end 
// micro_instr_ROM[ 26 ]
initial
begin
	micro_instr_ROM[26] = 1'b0;
end 
// micro_instr_ROM[ 25 ]
initial
begin
	micro_instr_ROM[25] = 1'b0;
end 
// micro_instr_ROM[ 24 ]
initial
begin
	micro_instr_ROM[24] = 1'b0;
	micro_instr_ROM[24] = #40000 1'b1;
	micro_instr_ROM[24] = #80000 1'b0;
end 
// micro_instr_ROM[ 23 ]
initial
begin
	micro_instr_ROM[23] = 1'b0;
	micro_instr_ROM[23] = #40000 1'b1;
	micro_instr_ROM[23] = #80000 1'b0;
end 
// micro_instr_ROM[ 22 ]
initial
begin
	micro_instr_ROM[22] = 1'b0;
	micro_instr_ROM[22] = #40000 1'b1;
	micro_instr_ROM[22] = #80000 1'b0;
end 
// micro_instr_ROM[ 21 ]
initial
begin
	micro_instr_ROM[21] = 1'b0;
	micro_instr_ROM[21] = #40000 1'b1;
	micro_instr_ROM[21] = #40000 1'b0;
end 
// micro_instr_ROM[ 20 ]
initial
begin
	micro_instr_ROM[20] = 1'b0;
	micro_instr_ROM[20] = #40000 1'b1;
	micro_instr_ROM[20] = #40000 1'b0;
end 
// micro_instr_ROM[ 19 ]
initial
begin
	micro_instr_ROM[19] = 1'b0;
	micro_instr_ROM[19] = #40000 1'b1;
	micro_instr_ROM[19] = #40000 1'b0;
end 
// micro_instr_ROM[ 18 ]
initial
begin
	micro_instr_ROM[18] = 1'b0;
	micro_instr_ROM[18] = #40000 1'b1;
	micro_instr_ROM[18] = #80000 1'b0;
end 
// micro_instr_ROM[ 17 ]
initial
begin
	micro_instr_ROM[17] = 1'b0;
end 
// micro_instr_ROM[ 16 ]
initial
begin
	micro_instr_ROM[16] = 1'b0;
	micro_instr_ROM[16] = #80000 1'b1;
	micro_instr_ROM[16] = #40000 1'b0;
end 
// micro_instr_ROM[ 15 ]
initial
begin
	micro_instr_ROM[15] = 1'b0;
end 
// micro_instr_ROM[ 14 ]
initial
begin
	micro_instr_ROM[14] = 1'b0;
	micro_instr_ROM[14] = #80000 1'b1;
	micro_instr_ROM[14] = #40000 1'b0;
end 
// micro_instr_ROM[ 13 ]
initial
begin
	micro_instr_ROM[13] = 1'b0;
	micro_instr_ROM[13] = #40000 1'b1;
	micro_instr_ROM[13] = #40000 1'b0;
end 
// micro_instr_ROM[ 12 ]
initial
begin
	micro_instr_ROM[12] = 1'b0;
	micro_instr_ROM[12] = #80000 1'b1;
	micro_instr_ROM[12] = #40000 1'b0;
end 
// micro_instr_ROM[ 11 ]
initial
begin
	micro_instr_ROM[11] = 1'b0;
end 
// micro_instr_ROM[ 10 ]
initial
begin
	micro_instr_ROM[10] = 1'b0;
end 
// micro_instr_ROM[ 9 ]
initial
begin
	micro_instr_ROM[9] = 1'b0;
end 
// micro_instr_ROM[ 8 ]
initial
begin
	micro_instr_ROM[8] = 1'b0;
	micro_instr_ROM[8] = #80000 1'b1;
	micro_instr_ROM[8] = #40000 1'b0;
end 
// micro_instr_ROM[ 7 ]
initial
begin
	micro_instr_ROM[7] = 1'b0;
end 
// micro_instr_ROM[ 6 ]
initial
begin
	micro_instr_ROM[6] = 1'b0;
	micro_instr_ROM[6] = #40000 1'b1;
	micro_instr_ROM[6] = #40000 1'b0;
end 
// micro_instr_ROM[ 5 ]
initial
begin
	micro_instr_ROM[5] = 1'b0;
	micro_instr_ROM[5] = #80000 1'b1;
	micro_instr_ROM[5] = #40000 1'b0;
end 
// micro_instr_ROM[ 4 ]
initial
begin
	micro_instr_ROM[4] = 1'b0;
	micro_instr_ROM[4] = #40000 1'b1;
	micro_instr_ROM[4] = #80000 1'b0;
end 
// micro_instr_ROM[ 3 ]
initial
begin
	micro_instr_ROM[3] = 1'b0;
	micro_instr_ROM[3] = #80000 1'b1;
	micro_instr_ROM[3] = #40000 1'b0;
end 
// micro_instr_ROM[ 2 ]
initial
begin
	micro_instr_ROM[2] = 1'b0;
	micro_instr_ROM[2] = #40000 1'b1;
	micro_instr_ROM[2] = #80000 1'b0;
end 
// micro_instr_ROM[ 1 ]
initial
begin
	micro_instr_ROM[1] = 1'b0;
	micro_instr_ROM[1] = #80000 1'b1;
	micro_instr_ROM[1] = #40000 1'b0;
end 
// micro_instr_ROM[ 0 ]
initial
begin
	micro_instr_ROM[0] = 1'b0;
end 
endmodule

