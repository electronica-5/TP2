// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/22/2021 17:14:03"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          TP2_EV21
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module TP2_EV21_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [6:0] B;
reg Clk1;
reg E;
// wires                                               
wire [32:0] MI;

// assign statements (if any)                          
TP2_EV21 i1 (
// port map - connection between master ports and signals/registers   
	.B(B),
	.Clk1(Clk1),
	.E(E),
	.MI(MI)
);
initial 
begin 
#1000000 $finish;
end 
// B[ 6 ]
initial
begin
	repeat(3)
	begin
		B[6] = 1'b0;
		B[6] = #128000 1'b1;
		# 128000;
	end
	B[6] = 1'b0;
	B[6] = #128000 1'b1;
end 
// B[ 5 ]
initial
begin
	repeat(7)
	begin
		B[5] = 1'b0;
		B[5] = #64000 1'b1;
		# 64000;
	end
	B[5] = 1'b0;
	B[5] = #64000 1'b1;
end 
// B[ 4 ]
initial
begin
	repeat(15)
	begin
		B[4] = 1'b0;
		B[4] = #32000 1'b1;
		# 32000;
	end
	B[4] = 1'b0;
	B[4] = #32000 1'b1;
end 
// B[ 3 ]
initial
begin
	repeat(31)
	begin
		B[3] = 1'b0;
		B[3] = #16000 1'b1;
		# 16000;
	end
	B[3] = 1'b0;
end 
// B[ 2 ]
initial
begin
	repeat(62)
	begin
		B[2] = 1'b0;
		B[2] = #8000 1'b1;
		# 8000;
	end
	B[2] = 1'b0;
end 
// B[ 1 ]
always
begin
	B[1] = 1'b0;
	B[1] = #4000 1'b1;
	#4000;
end 
// B[ 0 ]
always
begin
	B[0] = 1'b0;
	B[0] = #2000 1'b1;
	#2000;
end 

// E
initial
begin
	E = 1'b1;
end 

// Clk1
always
begin
	Clk1 = 1'b0;
	Clk1 = #500 1'b1;
	#500;
end 
endmodule

