// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/30/2021 20:17:06"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          TP2_EV21
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module TP2_EV21_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg [10:0] DATA_ADDR_IN;
reg [32:0] UIROM;
// wires                                               
wire [3:0] ALU;
wire BRANCH_UPDATE;
wire [5:0] C;
wire [10:0] DATA_ADD_OUT;
wire KMX;
wire [1:0] M;
wire [1:0] SH;
wire [6:0] T;

// assign statements (if any)                          
TP2_EV21 i1 (
// port map - connection between master ports and signals/registers   
	.ALU(ALU),
	.BRANCH_UPDATE(BRANCH_UPDATE),
	.C(C),
	.CLK(CLK),
	.DATA_ADD_OUT(DATA_ADD_OUT),
	.DATA_ADDR_IN(DATA_ADDR_IN),
	.KMX(KMX),
	.M(M),
	.SH(SH),
	.T(T),
	.UIROM(UIROM)
);
initial 
begin 
#10000000 $finish;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #100000 1'b1;
	#100000;
end 
// UIROM[ 32 ]
initial
begin
	UIROM[32] = 1'b0;
end 
// UIROM[ 31 ]
initial
begin
	UIROM[31] = 1'b0;
	UIROM[31] = #710000 1'b1;
	UIROM[31] = #200000 1'b0;
end 
// UIROM[ 30 ]
initial
begin
	UIROM[30] = 1'b0;
end 
// UIROM[ 29 ]
initial
begin
	UIROM[29] = 1'b0;
	UIROM[29] = #710000 1'b1;
	UIROM[29] = #200000 1'b0;
end 
// UIROM[ 28 ]
initial
begin
	UIROM[28] = 1'b0;
end 
// UIROM[ 27 ]
initial
begin
	UIROM[27] = 1'b0;
end 
// UIROM[ 26 ]
initial
begin
	UIROM[26] = 1'b0;
	UIROM[26] = #110000 1'b1;
	UIROM[26] = #210000 1'b0;
	UIROM[26] = #190000 1'b1;
	UIROM[26] = #400000 1'b0;
end 
// UIROM[ 25 ]
initial
begin
	UIROM[25] = 1'b0;
end 
// UIROM[ 24 ]
initial
begin
	UIROM[24] = 1'b0;
end 
// UIROM[ 23 ]
initial
begin
	UIROM[23] = 1'b0;
	UIROM[23] = #710000 1'b1;
	UIROM[23] = #200000 1'b0;
end 
// UIROM[ 22 ]
initial
begin
	UIROM[22] = 1'b0;
end 
// UIROM[ 21 ]
initial
begin
	UIROM[21] = 1'b0;
end 
// UIROM[ 20 ]
initial
begin
	UIROM[20] = 1'b0;
end 
// UIROM[ 19 ]
initial
begin
	UIROM[19] = 1'b0;
	UIROM[19] = #710000 1'b1;
	UIROM[19] = #200000 1'b0;
end 
// UIROM[ 18 ]
initial
begin
	UIROM[18] = 1'b0;
end 
// UIROM[ 17 ]
initial
begin
	UIROM[17] = 1'b0;
	UIROM[17] = #110000 1'b1;
	UIROM[17] = #210000 1'b0;
	UIROM[17] = #190000 1'b1;
	UIROM[17] = #400000 1'b0;
end 
// UIROM[ 16 ]
initial
begin
	UIROM[16] = 1'b0;
end 
// UIROM[ 15 ]
initial
begin
	UIROM[15] = 1'b0;
end 
// UIROM[ 14 ]
initial
begin
	UIROM[14] = 1'b0;
end 
// UIROM[ 13 ]
initial
begin
	UIROM[13] = 1'b0;
	UIROM[13] = #110000 1'b1;
	UIROM[13] = #210000 1'b0;
	UIROM[13] = #190000 1'b1;
	UIROM[13] = #400000 1'b0;
end 
// UIROM[ 12 ]
initial
begin
	UIROM[12] = 1'b0;
end 
// UIROM[ 11 ]
initial
begin
	UIROM[11] = 1'b0;
end 
// UIROM[ 10 ]
initial
begin
	UIROM[10] = 1'b0;
	UIROM[10] = #710000 1'b1;
	UIROM[10] = #200000 1'b0;
end 
// UIROM[ 9 ]
initial
begin
	UIROM[9] = 1'b0;
	UIROM[9] = #710000 1'b1;
	UIROM[9] = #200000 1'b0;
end 
// UIROM[ 8 ]
initial
begin
	UIROM[8] = 1'b0;
	UIROM[8] = #320000 1'b1;
	UIROM[8] = #190000 1'b0;
end 
// UIROM[ 7 ]
initial
begin
	UIROM[7] = 1'b0;
	UIROM[7] = #320000 1'b1;
	UIROM[7] = #190000 1'b0;
end 
// UIROM[ 6 ]
initial
begin
	UIROM[6] = 1'b0;
	UIROM[6] = #110000 1'b1;
	UIROM[6] = #210000 1'b0;
	UIROM[6] = #190000 1'b1;
	UIROM[6] = #400000 1'b0;
end 
// UIROM[ 5 ]
initial
begin
	UIROM[5] = 1'b0;
	UIROM[5] = #710000 1'b1;
	UIROM[5] = #200000 1'b0;
end 
// UIROM[ 4 ]
initial
begin
	UIROM[4] = 1'b0;
end 
// UIROM[ 3 ]
initial
begin
	UIROM[3] = 1'b0;
end 
// UIROM[ 2 ]
initial
begin
	UIROM[2] = 1'b0;
end 
// UIROM[ 1 ]
initial
begin
	UIROM[1] = 1'b0;
end 
// UIROM[ 0 ]
initial
begin
	UIROM[0] = 1'b0;
end 
// DATA_ADDR_IN[ 10 ]
initial
begin
	DATA_ADDR_IN[10] = 1'b1;
end 
// DATA_ADDR_IN[ 9 ]
initial
begin
	DATA_ADDR_IN[9] = 1'b0;
end 
// DATA_ADDR_IN[ 8 ]
initial
begin
	DATA_ADDR_IN[8] = 1'b1;
end 
// DATA_ADDR_IN[ 7 ]
initial
begin
	DATA_ADDR_IN[7] = 1'b0;
end 
// DATA_ADDR_IN[ 6 ]
initial
begin
	DATA_ADDR_IN[6] = 1'b1;
end 
// DATA_ADDR_IN[ 5 ]
initial
begin
	DATA_ADDR_IN[5] = 1'b0;
end 
// DATA_ADDR_IN[ 4 ]
initial
begin
	DATA_ADDR_IN[4] = 1'b1;
end 
// DATA_ADDR_IN[ 3 ]
initial
begin
	DATA_ADDR_IN[3] = 1'b0;
end 
// DATA_ADDR_IN[ 2 ]
initial
begin
	DATA_ADDR_IN[2] = 1'b1;
end 
// DATA_ADDR_IN[ 1 ]
initial
begin
	DATA_ADDR_IN[1] = 1'b0;
end 
// DATA_ADDR_IN[ 0 ]
initial
begin
	DATA_ADDR_IN[0] = 1'b1;
end 
endmodule

