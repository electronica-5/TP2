// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/31/2021 13:52:14"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          TP2_EV21
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module TP2_EV21_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg [10:0] DATA_ADD;
reg [32:0] uIROM;
// wires                                               
wire [4:0] A;
wire [3:0] ALU;
wire [5:0] B;
wire BRANCH;
wire [5:0] C;
wire [10:0] DATA_ADD_OUT;
wire HOLD;
wire KMX;
wire [1:0] M;
wire [1:0] SH;

// assign statements (if any)                          
TP2_EV21 i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.ALU(ALU),
	.B(B),
	.BRANCH(BRANCH),
	.C(C),
	.CLK(CLK),
	.DATA_ADD(DATA_ADD),
	.DATA_ADD_OUT(DATA_ADD_OUT),
	.HOLD(HOLD),
	.KMX(KMX),
	.M(M),
	.SH(SH),
	.uIROM(uIROM)
);
initial 
begin 
#1000000 $finish;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #20000 1'b1;
	#20000;
end 
// uIROM[ 32 ]
initial
begin
	uIROM[32] = 1'b0;
	uIROM[32] = #120000 1'b1;
	uIROM[32] = #40000 1'b0;
	uIROM[32] = #160000 1'b1;
	uIROM[32] = #40000 1'b0;
	uIROM[32] = #80000 1'b1;
	uIROM[32] = #120000 1'b0;
end 
// uIROM[ 31 ]
initial
begin
	uIROM[31] = 1'b0;
	uIROM[31] = #280000 1'b1;
	uIROM[31] = #40000 1'b0;
end 
// uIROM[ 30 ]
initial
begin
	uIROM[30] = 1'b0;
	uIROM[30] = #120000 1'b1;
	uIROM[30] = #40000 1'b0;
	uIROM[30] = #160000 1'b1;
	uIROM[30] = #40000 1'b0;
	uIROM[30] = #40000 1'b1;
	uIROM[30] = #160000 1'b0;
end 
// uIROM[ 29 ]
initial
begin
	uIROM[29] = 1'b0;
	uIROM[29] = #160000 1'b1;
	uIROM[29] = #200000 1'b0;
	uIROM[29] = #40000 1'b1;
	uIROM[29] = #40000 1'b0;
end 
// uIROM[ 28 ]
initial
begin
	uIROM[28] = 1'b0;
end 
// uIROM[ 27 ]
initial
begin
	uIROM[27] = 1'b0;
end 
// uIROM[ 26 ]
initial
begin
	uIROM[26] = 1'b0;
	uIROM[26] = #120000 1'b1;
	uIROM[26] = #40000 1'b0;
end 
// uIROM[ 25 ]
initial
begin
	uIROM[25] = 1'b0;
end 
// uIROM[ 24 ]
initial
begin
	uIROM[24] = 1'b0;
end 
// uIROM[ 23 ]
initial
begin
	uIROM[23] = 1'b0;
	uIROM[23] = #120000 1'b1;
	uIROM[23] = #440000 1'b0;
end 
// uIROM[ 22 ]
initial
begin
	uIROM[22] = 1'b0;
	uIROM[22] = #120000 1'b1;
	uIROM[22] = #160000 1'b0;
end 
// uIROM[ 21 ]
initial
begin
	uIROM[21] = 1'b0;
	uIROM[21] = #120000 1'b1;
	uIROM[21] = #160000 1'b0;
	uIROM[21] = #40000 1'b1;
	uIROM[21] = #80000 1'b0;
end 
// uIROM[ 20 ]
initial
begin
	uIROM[20] = 1'b0;
	uIROM[20] = #120000 1'b1;
	uIROM[20] = #40000 1'b0;
end 
// uIROM[ 19 ]
initial
begin
	uIROM[19] = 1'b0;
	uIROM[19] = #120000 1'b1;
	uIROM[19] = #40000 1'b0;
	uIROM[19] = #120000 1'b1;
	uIROM[19] = #160000 1'b0;
end 
// uIROM[ 18 ]
initial
begin
	uIROM[18] = 1'b0;
	uIROM[18] = #120000 1'b1;
	uIROM[18] = #40000 1'b0;
end 
// uIROM[ 17 ]
initial
begin
	uIROM[17] = 1'b0;
	uIROM[17] = #280000 1'b1;
	uIROM[17] = #80000 1'b0;
	uIROM[17] = #40000 1'b1;
	uIROM[17] = #160000 1'b0;
end 
// uIROM[ 16 ]
initial
begin
	uIROM[16] = 1'b0;
	uIROM[16] = #160000 1'b1;
	uIROM[16] = #160000 1'b0;
end 
// uIROM[ 15 ]
initial
begin
	uIROM[15] = 1'b0;
	uIROM[15] = #280000 1'b1;
	uIROM[15] = #40000 1'b0;
end 
// uIROM[ 14 ]
initial
begin
	uIROM[14] = 1'b0;
	uIROM[14] = #160000 1'b1;
	uIROM[14] = #160000 1'b0;
end 
// uIROM[ 13 ]
initial
begin
	uIROM[13] = 1'b0;
	uIROM[13] = #120000 1'b1;
	uIROM[13] = #40000 1'b0;
	uIROM[13] = #120000 1'b1;
	uIROM[13] = #80000 1'b0;
	uIROM[13] = #40000 1'b1;
	uIROM[13] = #160000 1'b0;
end 
// uIROM[ 12 ]
initial
begin
	uIROM[12] = 1'b0;
	uIROM[12] = #160000 1'b1;
	uIROM[12] = #200000 1'b0;
	uIROM[12] = #80000 1'b1;
	uIROM[12] = #120000 1'b0;
end 
// uIROM[ 11 ]
initial
begin
	uIROM[11] = 1'b0;
	uIROM[11] = #440000 1'b1;
	uIROM[11] = #120000 1'b0;
end 
// uIROM[ 10 ]
initial
begin
	uIROM[10] = 1'b0;
	uIROM[10] = #280000 1'b1;
	uIROM[10] = #80000 1'b0;
end 
// uIROM[ 9 ]
initial
begin
	uIROM[9] = 1'b0;
	uIROM[9] = #280000 1'b1;
	uIROM[9] = #40000 1'b0;
end 
// uIROM[ 8 ]
initial
begin
	uIROM[8] = 1'b0;
	uIROM[8] = #160000 1'b1;
	uIROM[8] = #160000 1'b0;
	uIROM[8] = #40000 1'b1;
	uIROM[8] = #40000 1'b0;
end 
// uIROM[ 7 ]
initial
begin
	uIROM[7] = 1'b0;
	uIROM[7] = #280000 1'b1;
	uIROM[7] = #40000 1'b0;
	uIROM[7] = #40000 1'b1;
	uIROM[7] = #40000 1'b0;
end 
// uIROM[ 6 ]
initial
begin
	uIROM[6] = 1'b0;
	uIROM[6] = #120000 1'b1;
	uIROM[6] = #40000 1'b0;
	uIROM[6] = #240000 1'b1;
	uIROM[6] = #40000 1'b0;
end 
// uIROM[ 5 ]
initial
begin
	uIROM[5] = 1'b0;
	uIROM[5] = #160000 1'b1;
	uIROM[5] = #160000 1'b0;
	uIROM[5] = #80000 1'b1;
	uIROM[5] = #160000 1'b0;
end 
// uIROM[ 4 ]
initial
begin
	uIROM[4] = 1'b0;
	uIROM[4] = #120000 1'b1;
	uIROM[4] = #160000 1'b0;
	uIROM[4] = #40000 1'b1;
	uIROM[4] = #120000 1'b0;
end 
// uIROM[ 3 ]
initial
begin
	uIROM[3] = 1'b0;
	uIROM[3] = #160000 1'b1;
	uIROM[3] = #120000 1'b0;
	uIROM[3] = #80000 1'b1;
	uIROM[3] = #40000 1'b0;
end 
// uIROM[ 2 ]
initial
begin
	uIROM[2] = 1'b0;
	uIROM[2] = #120000 1'b1;
	uIROM[2] = #160000 1'b0;
	uIROM[2] = #40000 1'b1;
	uIROM[2] = #120000 1'b0;
end 
// uIROM[ 1 ]
initial
begin
	uIROM[1] = 1'b0;
	uIROM[1] = #160000 1'b1;
	uIROM[1] = #120000 1'b0;
	uIROM[1] = #80000 1'b1;
	uIROM[1] = #40000 1'b0;
end 
// uIROM[ 0 ]
initial
begin
	uIROM[0] = 1'b0;
	uIROM[0] = #280000 1'b1;
	uIROM[0] = #80000 1'b0;
	uIROM[0] = #40000 1'b1;
	uIROM[0] = #160000 1'b0;
end 
endmodule

